name: 'Deploy Duke as Docker Swarm Manager'
description: 'Deploy the Duke project as the manager of the Docker Swarm network'
inputs:
  docker_username:
    description: 'Docker Hub username'
    required: true
  docker_password:
    description: 'Docker Hub password'
    required: true
  docker_image:
    description: 'Docker image to deploy'
    required: true
  infisical_client_id:
    description: 'Infisical Machine Identity Client ID'
    required: true
  infisical_client_secret:
    description: 'Infisical Machine Identity Client Secret'
    required: true
  project_id:
    description: 'Infisical Project ID'
    required: true
  droplet_ip:
    description: 'DigitalOcean Droplet IP'
    required: true
  ssh_user:
    description: 'SSH User'
    required: true
  ssh_private_key:
    description: 'SSH Private Key'
    required: true

runs:
  using: "composite"
  steps:
    - name: Install SSH Client & Add SSH Key
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install -y openssh-client
        echo "${{ inputs.ssh_private_key }}" > id_rsa
        chmod 600 id_rsa

    - name: Install Dependencies on Droplet
      shell: bash
      run: |
        ssh -i id_rsa -o StrictHostKeyChecking=no ${{ inputs.ssh_user }}@${{ inputs.droplet_ip }} << 'EOF'
          sudo apt-get update
          sudo apt-get install -y infisical docker.io containerd ufw net-tools
        EOF

    - name: Authenticate with Infisical and Save Token
      shell: bash
      run: |
        ssh -i id_rsa -o StrictHostKeyChecking=no ${{ inputs.ssh_user }}@${{ inputs.droplet_ip }} << 'EOF'
          INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=${{ inputs.infisical_client_id }} --client-secret=${{ inputs.infisical_client_secret }} --silent --plain)
          echo "INFISICAL_TOKEN=${INFISICAL_TOKEN}" >> ~/.bashrc
          export INFISICAL_TOKEN=${INFISICAL_TOKEN}
        EOF

    - name: Initialize Docker Swarm and Deploy Service on Droplet
      shell: bash
      run: |
        ssh -i id_rsa -o StrictHostKeyChecking=no ${{ inputs.ssh_user }}@${{ inputs.droplet_ip }} << 'EOF'
          echo "${{ inputs.docker_password }}" | docker login -u "${{ inputs.docker_username }}" --password-stdin
          docker pull ${{ inputs.docker_image }}
          docker swarm leave --force || true
          docker swarm init --advertise-addr $(hostname -I | awk '{print $1}') --listen-addr 0.0.0.0:2377
          
          # Retrieve and save Docker Swarm CA Fingerprint
          CA_FINGERPRINT=$(docker info --format '{{.Swarm.Cluster.TLSInfo.TrustRoot}}' | openssl x509 -noout -fingerprint -sha256 | sed 's/.*=//')
          if [ -z "$CA_FINGERPRINT" ]; then
            echo "Failed to retrieve CA Fingerprint."
            exit 1
          fi
          infisical secrets set DOCKER_SWARM_CA_FINGERPRINT="$CA_FINGERPRINT" --token $INFISICAL_TOKEN --projectId ${{ inputs.project_id }}

          # Save Swarm Join Token to Infisical
          MANAGER_TOKEN=$(docker swarm join-token -q manager)
          infisical secrets set DOCKER_SWARM_MANAGER_TOKEN="$MANAGER_TOKEN" --token $INFISICAL_TOKEN --projectId ${{ inputs.project_id }}

          # Create Docker Network and Deploy Service
          docker network inspect hyperion >/dev/null 2>&1 || docker network create --driver overlay hyperion
          docker service create --name duke --network hyperion -p 8080:8080 ${{ inputs.docker_image }}
        EOF

    - name: Check if Duke Service is Running
      shell: bash
      run: |
        ssh -i id_rsa -o StrictHostKeyChecking=no ${{ inputs.ssh_user }}@${{ inputs.droplet_ip }} << 'EOF'
          sleep 10
          if [ "$(docker service ls --filter name=duke -q)" ]; then
            echo "Duke service is running successfully."
            docker service ps duke
            docker service logs duke
          else
            echo "Duke service failed to start. Checking logs..."
            docker service logs duke
            exit 1
          fi
        EOF

    - name: Cleanup Docker Services on Failure
      shell: bash
      if: failure()
      run: |
        ssh -i id_rsa -o StrictHostKeyChecking=no ${{ inputs.ssh_user }}@${{ inputs.droplet_ip }} << 'EOF'
          docker service rm duke || true
          docker swarm leave --force || true
        EOF
