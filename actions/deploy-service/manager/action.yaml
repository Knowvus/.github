name: 'Deploy Duke as Docker Swarm Manager'
description: 'Deploy the Duke project as the manager of the Docker Swarm network'
inputs:
  docker_username:
    description: 'Docker Hub username'
    required: true
  docker_password:
    description: 'Docker Hub password'
    required: true
  docker_image:
    description: 'Docker image to deploy'
    required: true
  infisical_client_id:
    description: 'Infisical Machine Identity Client ID'
    required: true
  infisical_client_secret:
    description: 'Infisical Machine Identity Client Secret'
    required: true
  project_id:
    description: 'Infisical Project ID'
    required: true

runs:
  using: "composite"
  steps:
    - name: Install Infisical CLI
      shell: bash
      run: |
        curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo -E bash
        sudo apt-get update && sudo apt-get install -y infisical
    
    - name: Authenticate with Infisical
      shell: bash
      run: |
        echo "INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=${{ inputs.infisical_client_id }} --client-secret=${{ inputs.infisical_client_secret }} --silent --plain)" >> $GITHUB_ENV

    - name: Install Docker
      shell: bash
      run: |
        apt install docker.io -y
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}

    - name: Pull Docker Image
      shell: bash
      run: docker pull ${{ inputs.docker_image }}
    
    # - name: Check System Resources
    #   shell: bash
    #   run: |
    #     MEM_AVAILABLE=$(free -m | awk '/^Mem:/{print $7}')
    #     DISK_AVAILABLE=$(df -m / | awk 'NR==2 {print $4}')
    #     if [ "$MEM_AVAILABLE" -lt 512 ]; then
    #       echo "Insufficient memory to initialize Docker Swarm. Available: ${MEM_AVAILABLE}MB"
    #       exit 1
    #     fi
    #     if [ "$DISK_AVAILABLE" -lt 1024 ]; then
    #       echo "Insufficient disk space to deploy Docker service. Available: ${DISK_AVAILABLE}MB"
    #       exit 1
    #     fi

    # - name: Check Firewall Configuration
    #   shell: bash
    #   run: |
    #     REQUIRED_PORTS=(2377 7946 4789)
    #     for PORT in "${REQUIRED_PORTS[@]}"; do
    #       if ! sudo ufw status | grep -q "$PORT"; then
    #         echo "Port $PORT is not open. Configuring firewall."
    #         sudo ufw allow $PORT
    #       fi
    #     done

    - name: Initialize Docker Swarm Manager
      shell: bash
      run: |
        set -e
        echo "Leaving existing swarm if present..."
        docker swarm leave --force || true
        echo "Initializing Docker Swarm..."
        docker swarm init --advertise-addr $(hostname -I | awk '{print $1}') --listen-addr 0.0.0.0:2377
        if [ "$(docker info --format '{{.Swarm.LocalNodeState}}')" != "active" ]; then
          echo "Failed to initialize Docker Swarm."
          exit 1
        fi
        echo "MANAGER_TOKEN=$(docker swarm join-token -q manager)" >> $GITHUB_ENV

    # - name: Retry Swarm Initialization if Inactive
    #   shell: bash
    #   run: |
    #     if [ "$(docker info --format '{{.Swarm.LocalNodeState}}')" != "active" ]; then
    #       echo "Swarm inactive. Retrying initialization..."
    #       docker swarm init --advertise-addr $(hostname -I | awk '{print $1}') --listen-addr 0.0.0.0:2377
    #       if [ "$(docker info --format '{{.Swarm.LocalNodeState}}')" != "active" ]; then
    #         echo "Failed to initialize Docker Swarm after retry."
    #         exit 1
    #       fi
    #     fi

    - name: Retrieve Docker Swarm CA Fingerprint
      shell: bash
      run: |
        set -e
        CA_FINGERPRINT=$(docker info --format '{{.Swarm.Cluster.TLSInfo.TrustRoot}}' | openssl x509 -noout -fingerprint -sha256 | sed 's/.*=//')
        if [ -z "$CA_FINGERPRINT" ]; then
          echo "Failed to retrieve CA Fingerprint."
          exit 1
        fi
        echo "CA_FINGERPRINT=$CA_FINGERPRINT" >> $GITHUB_ENV

    - name: Save Swarm Join Token to Infisical
      shell: bash
      run: |
        infisical secrets set DOCKER_SWARM_MANAGER_TOKEN="${{ env.MANAGER_TOKEN }}" --token $INFISICAL_TOKEN --projectId ${{ inputs.project_id }}

    - name: Save CA Fingerprint to Infisical
      shell: bash
      run: |
        infisical secrets set DOCKER_SWARM_CA_FINGERPRINT="${{ env.CA_FINGERPRINT }}" --token $INFISICAL_TOKEN --projectId ${{ inputs.project_id }}

    - name: Create Docker Network
      shell: bash
      run: |
        docker network inspect hyperion >/dev/null 2>&1 || \
        docker network create --driver overlay hyperion

    - name: Deploy Duke as Docker Service
      shell: bash
      run: |
        docker service create --name duke \
          --network hyperion \
          -p 8080:8080 \
          ${{ inputs.docker_image }}

    - name: Check if Duke Service is Running
      shell: bash
      run: |
        sleep 10
        if [ "$(docker service ls --filter name=duke -q)" ]; then
          echo "Duke service is running successfully."
          docker service ps duke
          docker service logs duke
        else
          echo "Duke service failed to start. Checking logs..."
          docker service logs duke
          exit 1
        fi

    - name: Cleanup Docker Services on Failure
      if: failure()
      shell: bash
      run: |
        echo "Cleaning up Docker services..."
        docker service rm duke || true
        docker swarm leave --force || true
